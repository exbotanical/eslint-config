import pluginUnusedImports from 'eslint-plugin-unused-imports'
import globals from 'globals'

import { VAR_IGNORE_PATTERN } from '../common'

import type { AllOptions } from '../options'
import type { FlatConfigRecord } from '../types'

const NAMESPACE = 'exbotanical/javascript'

export async function javascript({ overrides = {} }: AllOptions = {}): Promise<
  FlatConfigRecord[]
> {
  return [
    {
      name: `${NAMESPACE}/setup`,
      languageOptions: {
        ecmaVersion: 'latest',
        globals: {
          ...globals.browser,
          ...globals.node,
          ...globals.es2021,
          document: 'readonly',
          navigator: 'readonly',
          window: 'readonly',
        },
        parserOptions: {
          ecmaFeatures: { jsx: true, impliedStrict: true },
          ecmaVersion: 'latest',
          sourceType: 'module',
        },
        sourceType: 'module',
      },
      linterOptions: {
        reportUnusedDisableDirectives: 'error',
        reportUnusedInlineConfigs: 'error',
      },
    },
    {
      name: `${NAMESPACE}/rules`,
      plugins: {
        'unused-imports': pluginUnusedImports,
      },
      rules: {
        'array-callback-return': ['error'],
        'constructor-super': ['error'],
        'for-direction': ['error'],
        'getter-return': ['error'],
        'no-async-promise-executor': ['error'],
        'no-class-assign': ['error'],
        'no-compare-neg-zero': ['error'],
        'no-cond-assign': ['error', 'except-parens'],
        'no-const-assign': ['error'],
        'no-constant-binary-expression': ['error'],
        'no-constant-condition': ['error'],
        'no-constructor-return': ['error'],
        'no-control-regex': ['error'],
        'no-debugger': ['error'],
        'no-dupe-args': ['error'],
        'no-dupe-class-members': ['error'],
        'no-dupe-else-if': ['error'],
        'no-dupe-keys': ['error'],
        'no-duplicate-case': ['error'],
        'no-duplicate-imports': ['error'],
        'no-empty-character-class': ['error'],
        'no-empty-pattern': ['error'],
        'no-unsafe-finally': ['error'],
        'no-unreachable-loop': ['error'],
        'no-unreachable': ['error'],
        'no-unmodified-loop-condition': ['error'],
        'no-unexpected-multiline': ['error'],
        'no-undef': ['error'],
        'no-this-before-super': ['error'],
        'no-template-curly-in-string': ['error'],
        'no-sparse-arrays': ['error'],
        'no-setter-return': ['error'],
        'no-self-compare': ['error'],
        'no-self-assign': ['error', { props: true }],
        'no-prototype-builtins': ['error'],
        'no-promise-executor-return': ['error'],
        'no-obj-calls': ['error'],
        'no-new-native-nonconstructor': ['error'],
        'no-misleading-character-class': ['error'],
        'no-loss-of-precision': ['error'],
        'no-irregular-whitespace': ['error'],
        'no-invalid-regexp': ['error'],
        'no-import-assign': ['error'],
        'no-func-assign': ['error'],
        'no-fallthrough': ['warn'],
        'no-ex-assign': ['error'],
        'no-unsafe-negation': ['error'],
        'no-unsafe-optional-chaining': ['error'],
        'no-unused-private-class-members': ['error'],
        'no-unused-vars': [
          'error',
          {
            vars: 'all',
            args: 'all',
            argsIgnorePattern: VAR_IGNORE_PATTERN,
            caughtErrorsIgnorePattern: VAR_IGNORE_PATTERN,
            destructuredArrayIgnorePattern: VAR_IGNORE_PATTERN,
            reportUsedIgnorePattern: true,
          },
        ],
        'no-use-before-define': [
          'error',
          { classes: false, functions: false, variables: true },
        ],
        'no-useless-assignment': ['error'],
        'no-useless-backreference': ['error'],
        'require-atomic-updates': ['error'],
        'use-isnan': [
          'error',
          { enforceForIndexOf: true, enforceForSwitchCase: true },
        ],
        'valid-typeof': ['error', { requireStringLiterals: true }],
        'class-methods-use-this': ['warn'],
        'consistent-return': ['error'],
        'curly': ['error', 'multi-line'],
        'default-case': [
          'error',
          {
            commentPattern: String.raw`^skip\sdefault`,
          },
        ],
        'default-case-last': ['error'],
        'dot-notation': ['error', { allowKeywords: true }],
        'eqeqeq': ['error', 'smart'],
        'func-names': ['error', 'as-needed'],
        'accessor-pairs': [
          'error',
          { enforceForClassMembers: true, setWithoutGet: true },
        ],
        'arrow-body-style': ['error', 'as-needed'],
        'block-scoped-var': ['error'],
        'camelcase': [
          'error',
          {
            ignoreImports: true,
          },
        ],
        'capitalized-comments': [
          'error',
          'always',
          {
            ignoreInlineComments: true,
            ignoreConsecutiveComments: true,
          },
        ],
        'grouped-accessor-pairs': ['error', 'getBeforeSet'],
        'max-params': ['warn', { max: 5 }],
        'new-cap': [
          'error',
          { capIsNew: false, newIsCap: true, properties: true },
        ],
        'no-alert': ['error'],
        'no-array-constructor': ['error'],
        'no-caller': ['error'],
        'no-case-declarations': ['warn'],
        'no-console': ['error', { allow: ['warn', 'error'] }],
        'no-delete-var': ['error'],
        'no-else-return': ['error'],
        'no-empty': ['error', { allowEmptyCatch: true }],
        'no-eval': ['error'],
        'no-extra-bind': ['error'],
        'no-extend-native': ['error'],
        'no-extra-boolean-cast': ['error'],
        'no-global-assign': ['error'],
        'no-implied-eval': ['error'],
        'no-invalid-this': ['error'],
        'no-iterator': ['error'],
        'no-labels': ['error', { allowLoop: false, allowSwitch: false }],
        'no-lone-blocks': ['error'],
        'no-multi-str': ['error'],
        'no-new': ['error'],
        'no-new-func': ['error'],
        'no-new-wrappers': ['error'],
        'no-octal': ['error'],
        'no-octal-escape': ['error'],
        'no-param-reassign': ['error'],
        'no-proto': ['error'],
        'no-redeclare': ['error', { builtinGlobals: false }],
        'no-regex-spaces': ['error'],
        'no-restricted-globals': [
          'error',
          { message: 'Use `globalThis` instead.', name: 'global' },
          { message: 'Use `globalThis` instead.', name: 'self' },
        ],
        'no-restricted-properties': [
          'error',
          {
            message:
              'Use `Object.getPrototypeOf` or `Object.setPrototypeOf` instead.',
            property: '__proto__',
          },
          {
            message: 'Use `Object.defineProperty` instead.',
            property: '__defineGetter__',
          },
          {
            message: 'Use `Object.defineProperty` instead.',
            property: '__defineSetter__',
          },
          {
            message: 'Use `Object.getOwnPropertyDescriptor` instead.',
            property: '__lookupGetter__',
          },
          {
            message: 'Use `Object.getOwnPropertyDescriptor` instead.',
            property: '__lookupSetter__',
          },
        ],
        'no-restricted-syntax': [
          'error',
          'TSEnumDeclaration[const=true]',
          'TSExportAssignment',
        ],
        'no-sequences': ['error'],
        'no-shadow-restricted-names': ['error'],
        'no-throw-literal': ['warn'],
        'no-undef-init': ['error'],
        'no-unneeded-ternary': ['error', { defaultAssignment: false }],
        'no-unused-expressions': [
          'error',
          {
            allowShortCircuit: true,
            allowTaggedTemplates: true,
            allowTernary: true,
          },
        ],
        'no-useless-call': ['error'],
        'no-useless-catch': ['error'],
        'no-useless-computed-key': ['error'],
        'no-useless-constructor': ['error'],
        'no-useless-return': ['error'],
        'no-var': ['error'],
        'no-with': ['error'],
        'no-useless-escape': ['error'],
        'object-shorthand': [
          'error',
          'always',
          {
            avoidQuotes: true,
            ignoreConstructors: false,
          },
        ],
        'one-var': ['error', { initialized: 'never', uninitialized: 'never' }],
        'prefer-arrow-callback': [
          'error',
          {
            allowNamedFunctions: false,
            allowUnboundThis: true,
          },
        ],
        'prefer-const': [
          'error',
          {
            destructuring: 'all',
            ignoreReadBeforeAssign: true,
          },
        ],
        'prefer-exponentiation-operator': ['error'],
        'prefer-promise-reject-errors': ['error'],
        'prefer-regex-literals': ['error', { disallowRedundantWrapping: true }],
        'prefer-rest-params': ['error'],
        'prefer-spread': ['error'],
        'prefer-template': ['error'],
        'radix': ['error'],
        'symbol-description': ['error'],
        'vars-on-top': ['error'],
        'yoda': ['error', 'never'],
        'unicode-bom': ['error', 'never'],
      },
      ...overrides,
    },
  ]
}
